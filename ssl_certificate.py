import socket
import ssl
import csv
import argparse
import datetime
from urllib.parse import urlparse
import os
import json
from os.path import exists
socket.setdefaulttimeout(8)
headers = {"user-agent": "Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/71.0.3578.98 Safari/537.36"}

def ssl_certificate(url):
	if(exists('./report/SSL_certificate/ssl_certs.txt')):
    		os.remove('./report/SSL_certificate/ssl_certs.txt')
	try:
	    os.mkdir('report')
	    os.chdir('report')
	except:
	    os.chdir('report')
	
	try:
		os.mkdir('./SSL_certificate')
		os.chdir('./SSL_certificate')
	except:
		os.chdir('./SSL_certificate')
	l = open('ssl_certs.txt' , 'a')
	def check_http2(domain_name):
		try:
			HOST = urlparse(domain_name).netloc
			PORT = 443
			# print(HOST)
			ctx = ssl.create_default_context()
			ctx.set_alpn_protocols(['h2', 'h2c' , 'http/2' , 'spdy/3',  'http/1.1' ])

			conn = ctx.wrap_socket(
				socket.socket(socket.AF_INET, socket.SOCK_STREAM), server_hostname=HOST)
			conn.connect((HOST, PORT))

			pp = conn.selected_alpn_protocol()
			cert = conn.getpeercert()
			written = {domain_name : cert}
			l.write(json.dumps(written, sort_keys=False, indent=4) + "\n")
			subject = (dict(x[0] for x in cert['subject']))['commonName']
			expired = cert['notAfter']
			exp = datetime.datetime(int(expired.split(' ')[3]) , int(datetime.datetime.strptime(expired.split(' ')[0], '%b').month), int(expired.split(' ')[1]))
			# print(exp)
			current_time = datetime.datetime.now()
			curr = datetime.datetime(current_time.year , current_time.month , current_time.day)
			# print(curr)
			host = False
			if(exp < curr):
				return {"SSL" : "not verified"}
			for x in cert['subjectAltName']:
				if (HOST.split('.')[0] != "www" and HOST.split('.')[0] in x[1]):
					print(subject.split('.')[0] , " " , HOST ,  "\n")
					# print(HOST.split('.')[0] , subject.split('.')[1] , '\n')
					host = True
					break
				elif (HOST.split('.')[0] == 'www' and HOST.split('.')[1] in x[1]):
					# print("sec if")
					# print(subject.split('.')[1] , " " , HOST ,  "\n")
					# print(HOST.split('.')[1] , x[1] , '\n')
					host = True
					break
			# print(subalt['DNS'])
			# print(subject.split('.')[0] , " " , HOST ,  "\n")
			# print(HOST.split('.')[0] , subject.split('.')[1] , '\n')
			# print(pp)
			# print(pp , ss  , '\n')
			if(pp == "h2" and host == True):
				return {"SSL": "verified"}
			elif(pp != "h2" and host == True):
				return {"SSL": "verified" , "HTTPS" : "False"}
			else: return {"SSL" : "not verified"}
		except Exception as e:
			print(e)


	# parser = argparse.ArgumentParser()
	# parser.add_argument("domain", help="website address you want to check for ssl",
	#                     type=str)
	# args = parser.parse_args()

	# print(check_http2(args.domain))

	if(exists('notverified.txt')):
	    os.remove('notverified.txt')
	with open("notverified.txt" , 'a') as p:
		j = check_http2(url)
		try:
			if(j["SSL"] == "not verified"):
				p.write(url)
		except Exception as e:
			print("")
		try:
			print(j)
		except:
			print("")
	os.chdir("./../..")
	


# ssl_certificate("https://www.google.com/")